<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前进 on wadahana&#39;s new blog</title>
    <link>https://wadahana.github.io/tags/%E5%89%8D%E8%BF%9B/</link>
    <description>Recent content in 前进 on wadahana&#39;s new blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Dec 2016 22:10:45 +0800</lastBuildDate>
    
	<atom:link href="https://wadahana.github.io/tags/%E5%89%8D%E8%BF%9B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS UIWebView PageCache</title>
      <link>https://wadahana.github.io/2016/12/24/ios-uiwebview-pagecache/</link>
      <pubDate>Sat, 24 Dec 2016 22:10:45 +0800</pubDate>
      
      <guid>https://wadahana.github.io/2016/12/24/ios-uiwebview-pagecache/</guid>
      <description>UIWebView很弱，前进后退的时候会reload页面，比如浏览&amp;rdquo;今日头条&amp;rdquo;, &amp;ldquo;taobao&amp;rdquo; 或者 &amp;ldquo;新浪微博&amp;rdquo; ，从某个条目的detail页面返回列表时会重新刷新并回到列表页面的头部。
iOS8之后放出的WKWebView性能体验各方面都不错，也没有这些reload的问题。不过WK的网络请求不能通过NSURLProtocol拦截，WK的网络请求是跨进程，而我们需要劫持流量进行计费，WK注定用不了。研究了下UCWeb，用的也是UIWebView。 最近的研究发现WK的渲染在WebContent进程中，网络请求在WebNetworking进程中；每开一个WKWebView，系统中就会多一个WebContent进程。 WebNetworking进程中网络流量也是可以被NSURLProtocol劫持到，需要通过私有API设置，但是音视频确实是由mediaserverd发出的，没办法劫持。
UIWebView的体系结构 这篇文章对UIWebView的分析很详尽，虽然不能直接得到解决方案，但是之后的研究得益于阅读这篇文章。 经过我们对各家APP的测试，发现可以后退而不刷新页面的浏览器有：UCWeb、 QQ浏览器、百度浏览器、 搜狗浏览器；后退会reload的浏览器：Chrome、Opera、猎豹、海豚、极速浏览器、傲云浏览器、手机百度。
我们走了一些弯路，由于之前研究过UC在播放视频，是用JS劫持video对象和load、play调用，然后传递video url到OC Native，再通过弹出Native的VideoView来播放视频，对于某些只有广告链接或者收费视频或者APP专享的视频，怀疑UC是有一套后端视频URL的聚合系统，可能通过ref url在后端查询真实的视频url来播放。有这个先入为主的惯性思维，一度我们怀疑UC也是用JS解决前进后退不刷新的问题。为了验证这个想法，我们用MobileSubstrate注入动态库到UC的进程空间里， Method Swizzling方法替换UIWebView的stringByEvaluatingJavaScriptFromString函数并直接返回，失效UCWeb对UIWebView所有额外的插入的js脚本，发现UCWeb的前进后退还是能够保持原有的dom元素。
再一条弯路是怀疑使用NSURLCache和NSURLProtocol做了缓存的影响，用同样的方法Hook initWithMemoryCapacity函数强制设置cache大小为0，同时在Hook UIWebView的loadRequest、goBack、goForward都去removeAllCachedResponses，对返回也是没有影响; 同样通过Hook registerClass和setProperty 函数，全部让其失效，验证也不是通过NSURLProtocol作用。
之所以走这样的弯路其实也是侥幸心理，不愿意花时间和精力去了解WebKit原理和分析WebKit代码。经常我们会由于各方面的压力，希望能够解决某个问题，而又不用花费太多的资源和时间，往往会走上错误的方向。最终我们还是乖乖的去读WebKit代码中关于UIWebView的那一部分。
UIWebView包含了WebBrowserView，WebBrowserView中还包含了一个无比重要的WebView对象，WebView暴露了很多有用的接口，一个很重要的对象WebBackForwardList；WebBackForwardList实际上是BackForwardList类的跨平台Wrapper类，BackForwardList就是装有HistoryItem的前进后退队列，同样WebHistoryItem也是HistoryItem的Wrapper类， 而实现浏览器前进后退不刷新的就是PageCache对象，PageCache是个单例，当点击一条链接跳转时，当前页面会被加入到gloablePageCache当中，返回时就直接从pageCache中拿出来显示。  WebBackForwardList有pageCacheSize和setPageCacheSize函数，读出UCWeb和我们自己程序的pageCacheSize对比，UC是5，我们的是0，说明了UC开启了pageCache，而我们没有。然而在程序中直接用setPageCacheSize, 再读出来依然还是0，同时劫持UC的setPageCacheSize函数，发现UC根本没有调用[WebBackForwardList setPageCacheSize]。  回到WebView类中，PageCache有一个setMaxSize方法，在WebView的_setCacheModel中被调用，_setCacheModel会根据0-2三种不同的cache模式和实际内存的大小设置各种缓存的大小，其中也包含了PageCache，实测证明在iPhone6 iOS8和iPhone5s iOS9.1上，cacheModel = WebCacheModelPrimaryWebBrowser时，可将pageCacheSize改为3。  最后放上Demo ： https://github.com/wadahana/WebViewDemo</description>
    </item>
    
  </channel>
</rss>